<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ajax</title>
    <url>/2021/06/14/Ajax/</url>
    <content><![CDATA[<h1 id="1-全局刷新和局部刷新"><a href="#1-全局刷新和局部刷新" class="headerlink" title="1.全局刷新和局部刷新"></a>1.全局刷新和局部刷新</h1><ol>
<li><p>全局刷新：用户发起请求，试图改变，跳转视图，使用新的数据添加到页面</p>
<p>缺点：</p>
<ol>
<li>传递数据量比较大。占用网络的带宽</li>
<li>浏览器需要重新的渲染整个页面</li>
<li>用户体验不是那么好</li>
</ol>
</li>
<li><p> 局部刷新：在当前页面中，发起请求，获取数据，更新当前页面的dom对象，对试图部分刷新</p>
</li>
</ol>
<p>   特点：</p>
<ol>
<li>数量比较小，在网络中传输速度快</li>
<li>更新页面内容，是部分跟新页面，浏览器不用全部渲染试图</li>
<li>在一个页面中，可以做多个 局部刷新</li>
<li>从服务器获取的是数据，拿到跟新视图</li>
</ol>
<h1 id="2-异步请求对象"><a href="#2-异步请求对象" class="headerlink" title="2.异步请求对象"></a>2.异步请求对象</h1><p>   在局部刷新中，使用异步请求对象，在浏览器内部发起请求，获取数据</p>
<p>   异步对象是在浏览器内部的一种JavaScript对象，各大浏览器都能支持异步对象的使用</p>
<p>   异步对象：XMLHttpRequest</p>
<h1 id="3-异步对象XMLHttpRequest接收"><a href="#3-异步对象XMLHttpRequest接收" class="headerlink" title="3.异步对象XMLHttpRequest接收"></a>3.异步对象XMLHttpRequest接收</h1><p>   s中的一种对象，使用js语法创建和使用这个对象</p>
<p>   et xhr = new  XMLHttpRequest();</p>
<p>   之后就可以使用xhr对象的属性和函数，进行异步对象的操作</p>
<p>   使用异步对象实现局部刷新：异步对象主要负责发起请求，传递请求的参数，并从服务器接收数据</p>
<p>   局部刷新需要使用那些技术：</p>
<ol>
<li>javascript:创建XMLHttpRequest对象，调用它的属性和方法</li>
<li>dom：处理dom，更新页面数据</li>
<li>servlet：服务器端技术</li>
<li>数据格式：json，他之前是xml</li>
</ol>
<p>   把上面这些技术的综合使用叫做Ajax（阿贾克斯）</p>
<h1 id="4-Ajax"><a href="#4-Ajax" class="headerlink" title="4.Ajax"></a>4.Ajax</h1><p>Ajax=Asynchronous JavaScript and XML （异步的JavaScript和XML）<br>Ajax是一种在无需重新加载整个页面的情况下，能够跟新出部分页面内容的新方法<br>Ajax不是一种新的编程语言<br>使用Ajax实现局部刷新<br>Ajax的核心是JavaScript和XML（json）：使用JavaScript操作异步对象XMLHttpRequest，和服务器交换使用json数据格式</p>
<h1 id="5-异步对象XMLHttpRequest属性和方法"><a href="#5-异步对象XMLHttpRequest属性和方法" class="headerlink" title="5.异步对象XMLHttpRequest属性和方法"></a>5.异步对象XMLHttpRequest属性和方法</h1><ol>
<li><p>创建异步对象，使用js的语法</p>
<p>let xhr = new XMLHttpRequest();</p>
</li>
<li><p> XMLHttpRequest方法</p>
</li>
</ol>
<p>   ①open(请求方式,服务器端的访问地址,异步还是同步)<br>   例如：xhr.open(“get”,”loginServlet”,true)<br>   ②send():使用异步对象发送请求</p>
<ol start="3">
<li><p>XMLHttpRequest属性</p>
<p>readyState属性：请求的状态</p>
<p>​    0：表示创建异步对象时：new XMLHttpRequest();</p>
<p>​    1：表示初始异步对象的请求参数，执行open()方法</p>
<p>​     2：使用send()方法发送请求。</p>
<p>​     3：使用异步对象从服务器接收了数据</p>
<p>​     4：异步对象接收了数据，并在异步对象内部处理完成后</p>
<p>status属性：</p>
<p>​    200：请求成功</p>
<p>​     404：服务器资源没用找到</p>
<p>​    500：服务器内部代码有错误</p>
<p>responseText属性：表示服务器端返回的数据</p>
<p>​     例如：let data = xhr.responseText;</p>
</li>
</ol>
<h1 id="6-异步对象XMLHttpRequest使用步骤"><a href="#6-异步对象XMLHttpRequest使用步骤" class="headerlink" title="6.异步对象XMLHttpRequest使用步骤"></a>6.异步对象XMLHttpRequest使用步骤</h1><ol>
<li><p>使用js创建异步对象</p>
<p>let xhr = new XMLHttpResquest</p>
</li>
<li><p>给异步对象绑定事件，事件名称 onreadystatechange</p>
<p>例如button增加单击事件onclick</p>
<p>xhr绑定事件</p>
<p>xhr.onreadystatechange = function() {   当事件发生时执行的代码  }</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;#btn&quot;</span>)</span></span><br><span class="line"><span class="javascript">        btn.onclick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest;</span></span><br><span class="line"><span class="javascript">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> data = xhr.responseText;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>初始请求参数，执行open()函数</p>
<p>xhr.open(“get”,”loginServlet”,true)</p>
</li>
<li><p>发送请求，执行send()</p>
<p>xhr.send()</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Ajax</category>
      </categories>
      <tags>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/2021/07/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><ol>
<li><p>所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对实例的方法</p>
</li>
<li><p>单例模式有两种方式</p>
<ol>
<li><p>饿汉式</p>
<ol>
<li><p>构造器私有化</p>
</li>
<li><p>类的内部创建对象</p>
</li>
<li><p>向外暴露一个静态的公共方法</p>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">//将构造器私有化，防止直接new</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//提供一个静态属性类型就是Singleton</span></span><br><span class="line">    <span class="comment">//先创建好这个类实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="comment">//提供一个public的静态方法，可以返回instance</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>懒汉式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton01</span> </span>&#123;</span><br><span class="line">    <span class="comment">//将构造器私有化，防止直接new</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton01</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//提供一个静态属性类型就是Singleton</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton01 instance;</span><br><span class="line">    <span class="comment">//提供一个public的静态方法，可以返回instance</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton01 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton01();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>两者最大的区别在于创建对象的时机不同：饿汉式是在类加载的时候就创建了对象实例，而懒汉式只有在用的时候才创建</p>
</li>
<li><p>饿汉式不存在线程安全问题，懒汉式存在线程安全问题</p>
</li>
<li><p>饿汉式存在资源浪费的可能。因为如果一个程序员一个对象实例都没有使用，那么饿汉式创建的对象就浪费了，懒汉式是使用时才创建，就不存在这个问题</p>
</li>
<li><p>在JavaSE标准类中，Java.long.Runtime就是经典的单例模式</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础</title>
    <url>/2021/06/26/Java%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="1-变量的概念"><a href="#1-变量的概念" class="headerlink" title="1.变量的概念"></a>1.变量的概念</h1><ol>
<li><p>概念</p>
<p>变量相当于内存中一个数据存储空间的表示，可以把变量看作是一个房间的门牌号，通过门牌号可以找到房间，通过变量名可以访问到变量的值</p>
</li>
<li><p>基本使用步骤</p>
<ol>
<li><p>声明变量</p>
<p>int a;</p>
</li>
<li><p>赋值</p>
<p>a = 10;</p>
</li>
<li><p>使用System.out.println(a)输出</p>
</li>
<li><p>也可以一步到位（int a = 10;）</p>
</li>
</ol>
</li>
<li><p>变量使用注意事项</p>
<ol>
<li>变量表示内存中的一个存储区域</li>
<li>该区域有自己的名称和类型</li>
<li>该区域的数据可以在同一类型范围内不断的变化</li>
<li>变量在同一个作用域内不能重名</li>
</ol>
</li>
</ol>
<h1 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2.数据类型"></a>2.数据类型</h1><ol>
<li>Java数据类型分为两大类   基本数据类型、引用类型</li>
<li>基本数据类型有8种 数值型[btye[ 1 ]、short[ 2 ]、int[ 4 ]、long[ 8 ]、float[ 4 ]、double[ 8 ] ] char[ 2 ]、boolean[ 1 ]</li>
<li>引用类型：类[ class ]，接口[ interface ]，数组[ {} ]</li>
<li>浮点数使用陷阱：2.7和8.1 / 3比较不相等</li>
</ol>
<h1 id="3-基本数据类型转换"><a href="#3-基本数据类型转换" class="headerlink" title="3.基本数据类型转换"></a>3.基本数据类型转换</h1><ol>
<li><p>有多种类型的数据混合运算时，系统首先自动将所有数据转换成容量最大的那种数据类型，然后再进行计算</p>
</li>
<li><p>当我们把精度（容量）大的数据类型赋值给精度容量小的数值类型时，就会报错，反之就会自动类型转换</p>
</li>
<li><p>（byte、short）和char之间不会相互自动转化</p>
</li>
<li><p>byte、short、char三者之间可以进行计算，计算时首先转化为int类型</p>
</li>
<li><p>自动提升原则：表达式结果的类型自动提升为操作数中最大的类型</p>
</li>
<li><p>基本数据类型和String类型的转换：</p>
<ol>
<li><p>基本数据类型转String</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">String s = a + <span class="string">&quot;&quot;</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>String类型转基本数据类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s = <span class="string">&quot;123&quot;</span></span><br><span class="line">Integer.parseInt(s);</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h1 id="4-标识符命名规范"><a href="#4-标识符命名规范" class="headerlink" title="4.标识符命名规范"></a>4.标识符命名规范</h1><ol>
<li>包名：多单词组成时所有字母都小写</li>
<li>类名，接口名：多单词组成时所有单词的首字母大写</li>
<li>变量名、方法名：多单词组成时，第一个单词首字母小写，其余单词首字母大写</li>
<li>常量名：所有字母都大写。多单词时每个单词用下划线连接</li>
</ol>
<h1 id="5-类与对象"><a href="#5-类与对象" class="headerlink" title="5.类与对象"></a>5.类与对象</h1><ol>
<li>类和对象的内存分配机制<ol>
<li>栈：一般存放基本数据类型（局部变量）</li>
<li>堆：存放对象（Cat cat 、 数组等）</li>
<li>方法区：常量池（常量，比如字符串），类加载信息</li>
</ol>
</li>
</ol>
<h1 id="6-递归"><a href="#6-递归" class="headerlink" title="6.递归"></a>6.递归</h1><p>递归的重要规则</p>
<ol>
<li>执行一个方法时，就创建一个新的受保护的独立空间（栈空间）</li>
<li>方法的局部变量是独立的，不会相互影响，比如n变量</li>
<li>如果方法中使用的是引用数据类型（数组、对象），就会共享该引用类型的数据</li>
<li>递归必须向退出递归的条件逼近，否则就是无线递归，出现StackOverflowError</li>
<li>当一个方法执行完毕，或者遇到return，就会返回，遵守谁调用，就将结果返回给谁，同时当方法执行完毕或者返回时，该方法也就执行完毕 </li>
</ol>
<h1 id="7-可变参数"><a href="#7-可变参数" class="headerlink" title="7.可变参数"></a>7.可变参数</h1><p>基本概念</p>
<ol>
<li>Java允许将同一个类中多个同名同功能但参数个数不同的方法，封装成一个方法，就可以通过可变参数实现</li>
<li>基本语法：访问修饰符 返回值类型 方法名（数据类型…形参名）</li>
<li>可变参数的注意事项和使用细节<ol>
<li>可变参数的实参可以时0个或任意个多</li>
<li>可变参数的实参可以为数组</li>
<li>可变参数的本质就是数组</li>
<li>可变参数可以和普通类型的参数一起放在形参列表，但必须保证可变参数在最后</li>
<li>一个形参列表中只能出现一个可变参数</li>
</ol>
</li>
</ol>
<h1 id="8-构造器-构造方法"><a href="#8-构造器-构造方法" class="headerlink" title="8.构造器/构造方法"></a>8.构造器/构造方法</h1><p>基本语法：[修饰符] 方法名 （形参列表）</p>
<ol>
<li>构造器的修饰符可以默认</li>
<li>一个类可以有多个构造器</li>
<li>构造器没有返回值</li>
<li>方法名必须和类名相同</li>
<li>参数列表和成员方法一样的规则</li>
<li>构造器是完成对象的初始化，并不是创建对象</li>
<li>构造器的调用系统完成</li>
<li>如果程序员没有定义构造器，系统会自动给类生成一个默认无参构造方法</li>
<li>一旦定义了自己的构造器，默认的构造器就被覆盖了，就不能再使用默认的无参构造器，除非显式的定义一下</li>
</ol>
<h1 id="9-面向对象的三大特征"><a href="#9-面向对象的三大特征" class="headerlink" title="9.面向对象的三大特征"></a>9.面向对象的三大特征</h1><ol>
<li>封装<ol>
<li>封装就是把抽象出来的数据[属性]和对数据的操作[方法]封装在一起，数据被保护在内部，程序的其他部分只有通过被授权的操作[方法]，才能对数据进行操作</li>
</ol>
</li>
<li>继承<ol>
<li>继承可以解决代码复用，让我们的编程更加靠近人类思维，当多个类存在相同的属性（变量）和方法时，可以从这些类中抽出父类，在父类中定义这些相同的属性和方法，所有的子类不需要重新定义这些属性和方法，只需要extends来声明继承父类即可</li>
<li>一个子类只能继承一个父类，一个父类可以有多个子类</li>
<li>子类必须调用父类的构造器，完成父类的初始化</li>
<li>当创建子类对象时，不管使用子类的那个构造器，默认情况下总会去调用父类的无参构造器，如果父类没有提供无参构造器，在必须在子类的构造器中用super去指定使用父类的那个构造器来完成父类的初始化工作，否则，编译不通过</li>
<li>super在使用时，需要放在构造器的第一行</li>
<li>super()和this()都只能放在构造器第一行，所以这两个方法不能共存在一个构造器</li>
</ol>
</li>
<li>多态<ol>
<li>多态的具体体现<ol>
<li>一个对象的编译类型和运行类型可以不一致</li>
<li>编译类型在定义对象时就确定了，不能改变</li>
<li>运行类型时可以变化的</li>
<li>编译类型看定义是 = 号的左边，运行类型看 = 号的右边</li>
</ol>
</li>
<li>多态的注意事项和细节讨论<ol>
<li>多态的前提是：两个类具有继承关系</li>
<li>多态的向上转型</li>
<li>本质：父类的引用指向了子类对象</li>
<li>语法：父类类型  引用名  =  new  子类类型()</li>
<li>特点：编译类型看左边，运行类型看右边，可以调用父类中的所有成员（需遵守访问权限）不能调用子类中的特有成员，最终运行效果看子类的具体实现</li>
<li>多态的向下转型<ol>
<li>语法：子类类型  引用名  =  （子类类型）父类引用</li>
<li>只能强转父类的引用，不能强转父类的对象</li>
<li>要求父类的引用必须指向的是当前目标类型的对象</li>
<li>当向下转型后，可以调用子类类型中所有的成员</li>
</ol>
</li>
<li>属性没有重写之说，属性的值看编译类型</li>
<li>instanceOf比较操作符，用于判断对象的运行类型是否为XX类型或XX类型的子类型</li>
<li>Java的动态绑定机制<ol>
<li>当调用对象方法的时候，该方法会和该对象的内存地址/运行类型绑定</li>
<li>当调用对象属性时，没有动态绑定机制，那里声明，那里使用</li>
</ol>
</li>
<li>类变量和类方法<ol>
<li>什么是类变量：类变量也叫做静态变量/静态属性，是该类的所有对象共享的变量，任何一个该类的对象去访问它时，取到的都是相同的值，同样任何一个该类的对象去修改它时，修改的也是同一个变量</li>
<li>如何定义类变量：访问修饰符 static 数据类型 变量名;访问修饰符可以不要</li>
<li>类变量是随着类的加载而创建，所以即使没有创建对象实例也可以访问</li>
<li>如何访问类变量：类名.类变量名或者，对象名.类变量名（静态变量的访问修饰符和访问权限和普通属性是一样的）</li>
<li>类变量使用注意事项和细节讨论<ol>
<li>什么时候需要有类变量：当我们需要让某个类的所有对象都共享一个变量时，就可以考虑使用类变量（静态变量）</li>
<li>类变量和实例变量的区别：类变量是该类的所有对象共享的，而实例变量是每个对象独享的</li>
<li>加上static关键字成为类变量或静态变量，否则称为实例变量/普通变量/非静态变量</li>
</ol>
</li>
</ol>
</li>
<li>解释main方法的形式：public static void main(String[] args){}<ol>
<li>main方法是虚拟机调用的</li>
<li>Java虚拟机需要调用类的main()方法，所以该方法的访问权限必须是public</li>
<li>Java虚拟机在执行main()方法时不必创建对象，所以该方法必须是static</li>
<li>该方法接收String类型的数组参数，该数组中保存执行Java命令时传递给所运行的类的参数</li>
</ol>
</li>
<li>代码块<ol>
<li>代码块又称初始化块，属于类中的成员，类似于方法，将逻辑语句封装在方法体中，通过{}包围起来</li>
<li>没有方法名，没有返回值类型，没有参数，只有方法体，而且不同通过对象显式调用，而是加载类时，或创建对象时隐式调用</li>
<li>注意：<ol>
<li>修饰符要写的话只能写static</li>
<li>代码块分为两类，使用static修饰的叫静态代码块，没有static修饰的叫普通代码块或非静态代码块</li>
<li>逻辑语句可以为任何逻辑语句（输入输出，方法调用，循环，判断等）</li>
</ol>
</li>
<li>代码块使用注意事项和细节讨论<ol>
<li>static代码块也叫静态代码块，作用就是对类进行初始化，而且随着类的加载而执行，且只会执行一次，非静态代码块每创建一个对象就会执行一次</li>
<li>类什么时候被加载<ol>
<li>创建对象实例时</li>
<li>创建子类对象实例，父类也会被加载</li>
<li>使用类的静态成员时</li>
</ol>
</li>
<li>普通代码块在创建对象实例时，会被隐式的调用，被创建一次就会调用一次，如果只是使用类的静态成员时，普通代码块并不会执行</li>
<li>创建一个对象时，在一个类中，调用顺序是<ol>
<li>调用静态代码块和静态属性初始化（静态代码块和静态属性初始化调用的优先级一样，如果有多个静态代码块和多个静态变量初始化，则按他们定义的顺序调用）</li>
<li>调用普通代码块和普通属性的初始化（普通代码块和普通属性初始化调用的优先级一样，如果有多个普通代码块和多个普通属性初始化，则按定义顺序调用）</li>
<li>调用构造方法</li>
</ol>
</li>
<li>构造方法（构造器）的最前面其实隐藏了super()和调用普通代码块；静态相关的代码块和属性初始化，在类加载时，就执行完毕，因此是优先于构造器和普通代码块执行的</li>
<li>静态代码块只能直接调用静态成员（静态属性和静态方法），普通代码块可以调用任意成员</li>
</ol>
</li>
</ol>
</li>
<li>final关键字<ol>
<li>final修饰的属性又叫常量，一般用xx_xx_xx来命名</li>
<li>final修饰的属性在定义时，必须赋初值，并且以后不能再修改，赋值可以在如下几个位置之一<ol>
<li>定义时：如 public final double TAX_RATE=0.8;</li>
<li>在构造器中</li>
<li>在代码块中</li>
</ol>
</li>
<li>如果final修饰的属性是静态的，则初始化的位置只能是<ol>
<li>定义时</li>
<li>在静态代码块，不能再构造器中赋值</li>
</ol>
</li>
<li>final类不能被继承，但是可以实例化对象</li>
<li>如果类不是final类，但是含有final方法，则该方法虽然不能重写，但是可以被继承</li>
<li>一般来说，如果一个类已经是final类，就没有必要再将方法修饰成final方法</li>
<li>final不能修饰构造方法</li>
<li>final和static往往搭配使用，效率更高，不会导致类加载，底层编译器做了优化处理</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h1 id="10-内部类"><a href="#10-内部类" class="headerlink" title="10.内部类"></a>10.内部类</h1><ol>
<li>局部内部类：说明：定义在外部类的局部位置，比如方法中，并且有类名<ol>
<li>可以直接访问外部类的所有成员，包含私有的</li>
<li>不能添加访问修饰符，因为他的地位就是一个局部变量，局部变量是不能使用修饰符的，但是可以使用final修饰，因为局部变量也可以使用final</li>
<li>作用域：仅仅在定义它的方法或代码块中</li>
<li>外部类访问局部内部类的成员：先创建对象，在访问</li>
</ol>
</li>
<li>匿名内部类：说明：定义在外部类的局部位置，比如方法中，没有类名<ol>
<li>基本语法：new 类或接口(参数列表){类体}</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
        <category>基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
